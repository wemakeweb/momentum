#!/usr/bin/env node
var program = require('commander');
var child = require('child_process');
var gulp = require("gulp");
var babel = require("gulp-babel");
var clean = require('gulp-clean');
var runSeq = require('run-sequence').use(gulp);

var package = require('../package.json');
var root = process.cwd();
var buildDir = root + '/dist';

program
	.command('run')
	.option('--prod')
	.option('--port [port]')
	.description('')
	.action(function (argument) {
		runSeq('clean', 'build', 'copy', function(){
			var instance = child.spawn(__dirname + '/momentum', ['start'], {
				cwd: buildDir,
				stdio: 'inherit' 
			});

			instance.on('close', function (code) {
			  //console.log('child process exited with code ' + code);
			});
		})
	});

program
	.command('start')
	.description('')
	.action(function (argument) {
		require('../lib/Momentum');
	});


gulp.task('build', function () {
    return gulp.src([
    	'models/**/*.js',
    	'components/**/*.js', 
    	'index.js'
    	], {
    		base: root
    	})
        .pipe(babel({
        	"compact": false,
			"optional": [
		      "es7"
		    ]
        }))
        .pipe(gulp.dest(buildDir));
});

gulp.task('clean', function(){
	return gulp.src('dist', {read: false})
    	.pipe(clean());
});

gulp.task('copy', function(){
	return gulp.src([
		'index.html',
		'momentum.json',
		'config.js'
	], {
		base: root
	}).pipe(gulp.dest(buildDir));
})

program.parse(process.argv);