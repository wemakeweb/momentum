#!/usr/bin/env node
var program = require('commander');
var child = require('child_process');
var gulp = require("gulp");
var babel = require("gulp-babel");
var clean = require('gulp-clean');
var runSeq = require('run-sequence').use(gulp);
var path = require('path');
var shell = require('gulp-shell');
var fs = require('fs');
var color = require('colors');

var root = process.cwd();
var buildDir = root + '/dist';

var exists = fs.existsSync(root + '/momentum.json');

if(!exists){
	console.log('No Momentumjs installation was found in this directory.');
	console.log('Install one with `momentumjs create`');
	process.exit(1);
} 

var package = require('../package.json');
var momentumjson = require(root + '/momentum.json');

program
.command('run')
.option('--prod')
.description('')
.action(function (options) {
	// clone the actual env vars to avoid overrides
	var env = Object.create(process.env);
	env.NODE_EV = options.prod ? 'production' : 'development';

	console.log(
		'%s - V: %s - Env: %s', 
		' Momentumjs '.toUpperCase().inverse.bold,
		package.version.grey,
		env.NODE_EV.grey
	);

	if(options.prod === true){
		env.buildDir = buildDir;
		runSeq('check', 'clean', 'build', /*'copy',*/ 'bundle', boot)
	} else {
		boot();	
	}

	function boot(){
		console.log('Booting %s', '...'.grey);

		if(options.prod){
			child.spawn(__dirname + '/momentum', ['start'], {
				cwd: root,
				stdio: 'inherit',
				env: env
			});
		} else {
			child.spawn('babel-node', ['-e', 'require("momentumjs");', '--stage', '0'], {
				cwd: root,
				stdio: 'inherit',
				env: env
			});
		}
	}
});

program
.command('start')
.description('')
.action(function (argument) {
	require('../lib/Momentum');
});


/**
 * Gulp Tasks
 * TODO: move in extern file
 */

 /**
  * builds the server part of the
  * application:
  * - transform es6 -> es5 js code
  * - copy to `buildDir`
  */

gulp.task('build', function () {
    return gulp.src([
    	'models/**/*.js',
    	'components/**/*.js', 
    	'index.js'
    	], {
    		base: root
    	})
        .pipe(babel({
        	"compact": false,
			"optional": [
		      "es7"
		    ]
        }))
        .pipe(gulp.dest(buildDir));
});

/**
 * rm -r `buildDir`
 */

gulp.task('clean', function(){
	return gulp.src(buildDir, {read: false})
    	.pipe(clean());
});

/**
 * copy non .js files into
 * `buildDir`
 */

gulp.task('copy', function(){
	return gulp.src([
		'index.html',
		'momentum.json'
	], {
		base: root
	}).pipe(gulp.dest(buildDir));
});

/**
 * bundle the client/browser package
 * with `jspm` and copy to `buildDir
*/

gulp.task('bundle', function(){
	/**
	 * we should rather whitelist the things
	 * we want to bundle instead of include everything
	 * via '*' and then exclude the unwanted files
	 */
	var bundleArgs = ['"*"',  '- config.js', '+ momentumjs'];
	var bundleName = '/momentumjs.bundle.js';
	var bundleFlags = ['--minify'];

	/**
	 * gulp.src(''), gulp.dest('') does nothing but
	 * is needed to correctly run
	 * the task
	 */
	return gulp.src('').pipe(
		shell([
			'jspm bundle-sfx ' 
			+ bundleArgs.join(' ') + ' ' 
			+ buildDir 
			+ bundleName + ' '
			+ bundleFlags.join(' ')
		], {cwd: root})
	).pipe(gulp.dest(''));
});

/**
 * check for the runtime dependencies
 * `jspm` and `babel-node`
 */

gulp.task('check', function(){
	return gulp.src('').pipe(
		shell([
			'command -v babel-node >/dev/null 2>&1 || { echo >&2 "Momentumjs requires babel-node to be installed as development server but it\'s not.  Aborting."; exit 1; }',
			'command -v jspm >/dev/null 2>&1 || { echo >&2 "Momentumjs requires jspm to be installed but it\'s not.  Aborting."; exit 1; }'
		])
	).pipe(gulp.dest(''));
});

program.parse(process.argv);